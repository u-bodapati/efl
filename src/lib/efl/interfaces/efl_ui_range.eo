interface Efl.Ui.Range
{
   [[Efl UI progress interface]]
   methods {
      @property span_size {
         [[Control the (exact) length of the bar region of a given range widget

           This sets the minimum width (when in horizontal mode) or height
           (when in vertical mode) of the actual bar area of the range
           bar $obj. This in turn affects the object's minimum size. Use
           this when you're not setting other size hints expanding on the
           given direction (like weight and alignment hints) and you would
           like it to have a specific size.

           Note: Icon, label and unit text around $obj will require their
           own space, which will make $obj to require more the $size,
           actually.]]
         set {
         }
         get {
         }
         values {
            size: int; [[The length of the range's bar region]]
         }
      }
      @property range_value {
         [[Control the range value (in percentage) on a given range widget

           Use this call to set range levels.

           Note: If you pass a value out of the specified interval for
           $val, it will be interpreted as the closest of the boundary
           values in the interval.]]
         set {
         }
         get {
         }
         values {
            val: double; [[The range value (must be between $0.0 and 1.0)]]
         }
      }
      @property range_min_max {
         set {
            [[Set the minimum and maximum values for given range widget.

              Define the allowed range of values to be selected by the user.

              If actual value is less than $min, it will be updated to $min.
              If it is bigger then $max, will be updated to $max. Actual value
              can be get with @Efl.Ui.Range.range_value.get

              By default, min is equal to 0.0, and max is equal to 1.0.

              Warning: maximum must be greater than minimum, otherwise behavior
              is undefined.
            ]]
         }
         get {
            [[Get the minimum and maximum values of the given range widget.

              Note: If only one value is needed, the other pointer can be passed
              as $null.
            ]]
         }
         values {
            min: double; [[The minimum value.]]
            max: double; [[The maximum value.]]
         }
      }
      @property range_unit_format {
         [[Control the format string for a given range widget's units label

           If $NULL is passed on $format, it will make $obj's units
           area to be hidden completely. If not, it'll set the <b>format
           string</b> for the units label's text. The units label is
           provided a floating point value, so the units text is up display
           at most one floating point value. Note that the units label is
           optional. Use a format string such as "%1.2f meters" for
           example.

           Note: The default format string for a range is an integer
           percentage, as in $"%.0f %%".]]
         set {
         }
         get {
         }
         values {
            units: string @nullable; [[The format string for $obj's units label]]
         }
      }
    @property range_interval_enabled {
         [[ This enables two indicators in given range widget.

           @since 1.18
         ]]
         values {
            enable: bool; [[$true if two indicators are enabled, $false otherwise]]
         }
      }
      @property range_interval {
         [[ Sets up a start and end range point for given range widget.

           @since 1.18
         ]]
         values {
            from: double; [[Interval minimum value]]
            to: double; [[Interval maximum value]]
         }
      }
   }
}
